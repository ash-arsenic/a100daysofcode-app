package com.example.a100daysofcode;

import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import androidx.annotation.Nullable;

import java.util.ArrayList;

public class ProblemsDatabase extends SQLiteOpenHelper {

    public static final String TABLE = "PROBLEMS";
    public static final String NUM = "NUM";
    public static final String TITLE = "TITLE";
    public static final String DESCRIPTION = "DESCRIPTION";
    public static final String ANSWER = "ANSWER";
    public static final String DIFFICULTY = "DIFFICULTY";
    public static final String STATUS = "STATUS";

    public ProblemsDatabase(@Nullable Context context) {
        super(context, "problems.db", null, 1);
    }

    @Override
    public void onCreate(SQLiteDatabase sqLiteDatabase) {
        sqLiteDatabase.execSQL("CREATE TABLE " + TABLE + " (" + NUM + " INTEGER PRIMARY KEY AUTOINCREMENT, " + TITLE + " TEXT, " + DESCRIPTION + " TEXT, " + ANSWER + " TEXT, " + DIFFICULTY +" TEXT, " + STATUS + " INTEGER);");

        String title[] = {"Prime Numbers",
                "Multiples of 3 or 5",
                "Even Fibonacci numbers",
                "Largest prime factor",
                "Largest palindrome product",
                "Smallest multiple",
                "Special Pythagorean triplet",
                "Longest Collatz Sequence",
                "Counting Sundays",
                "Coin sums"
        };

        String discriptions[] = {"A prime is a non negative number which is divisible by only 1 and itself. The first 5 prime numbers are:\n" +
                "\n2, 3, 5, 7, 9 ....\n" +
                "\nFind the sum of all prime numbers below 1000.",

                "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n" +
                "\n" +
                "Find the sum of all the multiples of 3 or 5 below 1000.",

                "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n" +
                "\n" +
                "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n" +
                "\n" +
                "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.",

                "The prime factors of 13195 are 5, 7, 13 and 29.\n" +
                "\n" +
                "What is the largest prime factor of the number 600851475143 ?",

                "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\n" +
                "\n" +
                "Find the largest palindrome made from the product of two 3-digit numbers.",

                "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n" +
                "\n" +
                "What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n" +
                "\n",

                "A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n" +
                "\n" +
                "a^2 + b^2 = c^2\n" +
                "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n" +
                "\n" +
                "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n" +
                "Find the product abc.",

                "The following iterative sequence is defined for the set of positive integers:\n" +
                "\n" +
                "n → n/2 (n is even)\n" +
                "n → 3n + 1 (n is odd)\n" +
                "\n" +
                "Using the rule above and starting with 13, we generate the following sequence:\n" +
                "\n" +
                "13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\n" +
                "It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.\n" +
                "\n" +
                "Which starting number, under one million, produces the longest chain?\n" +
                "\n" +
                "NOTE: Once the chain starts the terms are allowed to go above one million.",

                "You are given the following information, but you may prefer to do some research for yourself.\n" +
                        "\n" +
                "-> 1 Jan 1900 was a Monday.\n" +
                "-> Thirty days has September,\n" +
                "-> April, June and November.\n" +
                "-> All the rest have thirty-one,\n" +
                "-> Saving February alone,\n" +
                "-> Which has twenty-eight, rain or shine.\n" +
                "-> And on leap years, twenty-nine.\n" +
                "-> A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\n" +
                "How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?",

                "In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:\n" +
                "\n" +
                "1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).\n" +
                "It is possible to make £2 in the following way:\n" +
                "\n" +
                "1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p\n" +
                "How many different ways can £2 be made using any number of coins?"

        };

        String answers[] = {"76127",
                "233168",
                "4613732",
                "6857",
                "906609",
                "232792560",
                "31875000",
                "837799",
                "171",
                "73682"
        };

        for(int i=0; i<10; i++) {
            Problem problem = new Problem(title[i], discriptions[i], answers[i], "easy", 0);
            addOne(problem, TABLE, sqLiteDatabase);
        }
    }

    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {

    }

    public boolean addOne(Problem problem, String table, SQLiteDatabase db) {
        ContentValues cv = new ContentValues();

        cv.put(TITLE, problem.getTitle());
        cv.put(DESCRIPTION, problem.getStatement());
        cv.put(ANSWER, problem.getAnswer());
        cv.put(DIFFICULTY, problem.getDifficulty());
        cv.put(STATUS, problem.isStatus());

        long insert = db.insert(table, null, cv);

        return insert != -1;
    }

    public boolean update(Problem problem, int id) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        cv.put(TITLE, problem.getTitle());
        cv.put(DESCRIPTION, problem.getStatement());
        cv.put(ANSWER, problem.getAnswer());
        cv.put(DIFFICULTY, problem.getDifficulty());
        cv.put(STATUS, problem.isStatus());

        long insert = db.update(TABLE, cv, NUM+" = ? ", new String[]{String.valueOf(id)});

        return insert != -1;
    }

    public ArrayList<Problem> getEveryone(String table) {
        ArrayList<Problem> data = new ArrayList<>();
        SQLiteDatabase db = this.getReadableDatabase();

        Cursor cursor = db.rawQuery("SELECT * FROM " + table, null);

        if (cursor.moveToFirst()) {
            do {
                String problemTitle = cursor.getString(1);
                String problemDescription = cursor.getString(2);
                String problemAnswer = cursor.getString(3);
                String problemDifficulty = cursor.getString(4);
                int status = cursor.getInt(5);

                Problem problem = new Problem(problemTitle, problemDescription, problemAnswer, problemDifficulty, status);
                data.add(problem);

            } while (cursor.moveToNext());
        }
        cursor.close();
        db.close();

        return data;
    }
}
